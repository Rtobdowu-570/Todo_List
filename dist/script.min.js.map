{"version":3,"sources":["script.js"],"names":["TaskManager","_classCallCheck","this","tasks","JSON","parse","localStorage","getItem","setItem","stringify","task","push","saveTasks","filter","id","find","toggled","t","UI","taskData","taskList","document","querySelector","taskItem","className","setAttribute","taskCheckbox","createElement","type","checked","taskLabel","textContent","text","deleteBtn","append","appendChild","requestAnimationFrame","style","animation","scrollTop","scrollHeight","value","element","setTimeout","remove","children","length","emptyState","insertBefore","form","div","alert","total","completed","pending","innerHTML","pendingEl","totalEl","completedEl","message","container","stats","taskManager","getTasks","forEach","renderTask","updateFooterStats","e","key","preventDefault","trim","alertMessage","now","clearInput","addEventListener","target","classList","contains","taskId","Number","parseInt","parentElement","getAttribute","removeTask","deleteTask","toggle","toggleTask","Date","toLowerCase","addTask","add"],"mappings":"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","file":"script.min.js","sourcesContent":["class TaskManager {\n  constructor() {\n    this.tasks = JSON.parse(localStorage.getItem(\"tasks\")) || []\n  }\n\n  saveTasks() {\n    localStorage.setItem(\"tasks\", JSON.stringify(this.tasks))\n  }\n\n  addTask(task) {\n    this.tasks.push(task)\n    this.saveTasks()\n  }\n\n  removeTask(id) {\n    this.tasks = this.tasks.filter((task) => task.id !== id)\n    this.saveTasks()\n  }\n\n  toggleTask(id) {\n    const task = this.tasks.find((task) => task.id === id)\n    if (task) task.toggled = !task.toggled\n    this.saveTasks()\n  }\n\n  filterTasks(filter) {\n    if (filter === \"completed\") return this.tasks.filter((t) => t.toggled)\n    if (filter === \"pending\") return this.tasks.filter((t) => !t.toggled)\n    return this.tasks\n  }\n\n  getTasks() {\n    return this.tasks\n  }\n}\n\nclass UI {\n  static renderTask(taskData) {\n    const taskList = document.querySelector(\".task-list\")\n    const taskItem = document.createElement(\"div\")\n    taskItem.className = \"task-item\"\n    taskItem.setAttribute(\"data-id\", taskData.id)\n\n    const taskCheckbox = document.createElement(\"input\")\n    taskCheckbox.type = \"checkbox\"\n    taskCheckbox.className = \"task-checkbox\"\n    if (taskData.toggled) taskCheckbox.checked = true\n\n    const taskLabel = document.createElement(\"p\")\n    taskLabel.className = taskData.toggled ? \"task-label completed\" : \"task-label\"\n    taskLabel.textContent = taskData.text\n\n    const deleteBtn = document.createElement(\"span\")\n    deleteBtn.className = \"task-delete\"\n    deleteBtn.textContent = \"[x]\"\n\n    taskItem.append(taskCheckbox, taskLabel, deleteBtn)\n    taskList.appendChild(taskItem)\n\n    requestAnimationFrame(() => {\n      taskItem.style.animation = \"fadeIn 0.3s ease forwards\"\n    })\n\n    taskList.scrollTop = taskList.scrollHeight\n  }\n\n  static clearInput() {\n    document.querySelector(\".terminal-input\").value = \"\"\n  }\n\n  static deleteTask(element) {\n    element.style.animation = \"slideOut 0.3s ease forwards\"\n    setTimeout(() => {\n      element.remove()\n      const taskList = document.querySelector(\".task-list\")\n      if (taskList.children.length === 0) {\n        const emptyState = document.createElement(\"div\")\n        emptyState.className = \"empty-state\"\n        emptyState.innerHTML = `\n          <p class=\"comment\">// no tasks found</p>\n          <p class=\"comment\">// add your first task above</p>\n        `\n        document.querySelector(\".tasks-container\").insertBefore(emptyState, taskList)\n      }\n    }, 300)\n  }\n\n  static alertMessage(message) {\n    const div = document.createElement(\"div\")\n    div.className = \"alert\"\n    div.textContent = message\n    const container = document.querySelector(\".tasks-container\")\n    const form = document.querySelector(\".task-list\")\n    container.insertBefore(div, form)\n\n    requestAnimationFrame(() => {\n      div.style.animation = \"fadeIn 0.2s ease forwards\"\n    })\n\n    setTimeout(() => {\n      const alert = document.querySelector(\".alert\")\n      if (alert) {\n        alert.style.animation = \"fadeOut 0.2s ease forwards\"\n        setTimeout(() => alert.remove(), 200)\n      }\n    }, 2000)\n  }\n\n  static updateFooterStats(tasks) {\n    const total = tasks.length\n    const completed = tasks.filter((t) => t.toggled).length\n    const pending = total - completed\n\n    const totalEl = document.querySelector(\".total-tasks\")\n    const completedEl = document.querySelector(\".completed-tasks\")\n    const pendingEl = document.querySelector(\".pending-tasks\")\n\n    if (totalEl) totalEl.textContent = total\n    if (completedEl) completedEl.textContent = completed\n    if (pendingEl) pendingEl.textContent = pending\n\n    const stats = document.querySelector(\".stats\")\n    if (stats) {\n      stats.style.animation = \"pulse 0.3s ease\"\n      setTimeout(() => {\n        stats.style.animation = \"\"\n      }, 300)\n    }\n  }\n}\n\nconst taskManager = new TaskManager()\n\n// Load tasks\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const tasks = taskManager.getTasks()\n  const emptyState = document.querySelector(\".empty-state\")\n  if (tasks.length > 0 && emptyState) emptyState.remove()\n  tasks.forEach((task) => UI.renderTask(task))\n  UI.updateFooterStats(tasks)\n})\n\n// Add task\ndocument.querySelector(\".terminal-input\").addEventListener(\"keypress\", (e) => {\n  if (e.key === \"Enter\") {\n    e.preventDefault()\n    const input = document.querySelector(\".terminal-input\")\n    const text = input.value.trim()\n    if (!text) return UI.alertMessage(\"// Please enter a task\")\n\n    const taskData = { id: Date.now(), text, toggled: false }\n    const emptyState = document.querySelector(\".empty-state\")\n    if (emptyState) emptyState.remove()\n\n    taskManager.addTask(taskData)\n    UI.renderTask(taskData)\n    UI.clearInput()\n    UI.alertMessage(\"// Task added\")\n\n    UI.updateFooterStats(taskManager.getTasks())\n  }\n})\n\n// Delete task\ndocument.querySelector(\".task-list\").addEventListener(\"click\", (e) => {\n  if (e.target.classList.contains(\"task-delete\")) {\n    const taskId = Number.parseInt(e.target.parentElement.getAttribute(\"data-id\"))\n    taskManager.removeTask(taskId)\n    UI.deleteTask(e.target.parentElement)\n    UI.alertMessage(\"// Task removed\")\n    UI.updateFooterStats(taskManager.getTasks())\n  }\n})\n\n// Toggle task\ndocument.querySelector(\".task-list\").addEventListener(\"change\", (e) => {\n  if (e.target.classList.contains(\"task-checkbox\")) {\n    const taskId = Number.parseInt(e.target.parentElement.getAttribute(\"data-id\"))\n    const label = e.target.nextElementSibling\n    label.classList.toggle(\"completed\", e.target.checked)\n    taskManager.toggleTask(taskId)\n    UI.alertMessage(\"// Task status updated\")\n    UI.updateFooterStats(taskManager.getTasks())\n  }\n})\n\n// Filter\ndocument.querySelector(\".btn-filter\").addEventListener(\"click\", () => {\n  document.querySelector(\".filter-options\").classList.toggle(\"hidden\")\n})\n\ndocument.querySelector(\".filter-options\").addEventListener(\"click\", (e) => {\n  e.preventDefault()\n  const filter = e.target.textContent.toLowerCase()\n  const filtered = taskManager.filterTasks(filter)\n  const list = document.querySelector(\".task-list\")\n  list.innerHTML = \"\"\n  filtered.forEach((task) => UI.renderTask(task))\n  UI.updateFooterStats(taskManager.getTasks())\n  document.querySelector(\".filter-options\").classList.add(\"hidden\")\n})\n"]}